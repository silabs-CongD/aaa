name: build-firmware
on:
  pull_request:
    types: [opened, synchronize, edited]

  workflow_dispatch:

env:
  ARCH: x86_64
  POST_BUILD_EXE: "/opt/commander-cli/commander-cli"
  ARM_GCC_DIR: "/opt/gcc-arm-none-eabi/"
  ARM_GCC_URL: "https://developer.arm.com/-/media/Files/downloads/gnu/12.2.rel1/binrel/arm-gnu-toolchain-12.2.rel1-x86_64-arm-none-eabi.tar.xz"
  
  STUDIO_ADAPTER_PACK_PATH: ${{ github.workspace }}/tools/zap
  SL_SLC_PATH: ${{ github.workspace }}/tools/slc_cli/slc

jobs:
  FW_build:
    runs-on: ubuntu-latest
    steps:
      - name: Fork Repo Info
        run: |
          echo ${{ github.base_ref }} 
          echo ${{ github.event.pull_request.number }}
          echo ${{ github.event.pull_request.head.sha }} 
          echo ${{ github.event.pull_request.base.sha  }}          
      
      - name: Checkout Fork Repo
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.pull_request.head.user.login }}/${{ github.event.repository.name }}
          ref: ${{ github.event.pull_request.head.ref }}
    
      - name: Check the change
        id: check_change
        run: |
          git remote add upstream https://github.com/${{ github.repository }}.git
          git fetch upstream
          git diff --name-only upstream/${{ github.event.repository.default_branch }} HEAD > git_log.txt
          grep -v "scripts\\|.github\\|.gitmodules" git_log.txt > git_diff.txt

          xargs -I{} -a git_diff.txt find {} -type f -name "*.[ch]" > source_list.txt
          xargs -I{} -a git_diff.txt find {} -type f -name "*.slcp" > solution_list.txt

          if ! [ -s source_list.txt -o -s solution_list.txt ]; then
            echo "No project changes detected...........Skipped"
            echo "has_changes=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          echo "has_changes=true" >> $GITHUB_OUTPUT

          # For debug
          cat solution_list.txt
        
      - name: Install Dependencies
        if: ${{ steps.check_change.outputs.has_changes == 'true' }}
        run: |
          sudo apt-get update && \
          sudo apt-get install --no-install-recommends -y \
          curl \
          python3-pip \
          wget \
          build-essential \
          ninja-build \
          make \
          zip \
          unzip \
          libgl1 \
          libglib2.0-0 \
          libpcre2-dev \
          git-lfs

          pip3 install gitpython > /dev/null
          git lfs install --skip-repo > /dev/null

      - name: Install Silabs Tools
        if: ${{ steps.check_change.outputs.has_changes == 'true' }}
        run: |
          mkdir tools
          curl -L -o slccli.zip https://github.com/AEP-CI-TEAM/ci_tools/releases/download/v2.0/slc_cli_linux.zip
          unzip slccli.zip -d tools > /dev/null && rm slccli.zip
          chmod +x $SL_SLC_PATH

          wget https://www.silabs.com/documents/login/software/SimplicityCommander-Linux.zip \
          && unzip SimplicityCommander-Linux.zip \
          && tar -xf SimplicityCommander-Linux/Commander-cli_linux_${{ env.ARCH }}_*.tar.bz \
          && mv commander-cli /opt/commander-cli \
          && rm -rf SimplicityCommander-Linux.zip SimplicityCommander-Linux      

          mkdir -p ${{ github.workspace }}/tools/zap
          curl -L -o zap-linux-x64.zip https://github.com/project-chip/zap/releases/download/v2025.01.15/zap-linux-x64.zip
          unzip zap-linux-x64.zip -d ${{ github.workspace }}/tools/zap > /dev/null && rm zap-linux-x64.zip
          ${{ github.workspace }}/tools/zap/zap-cli status

      - name: Install GNU Arm Embedded Toolchain
        if: ${{ steps.check_change.outputs.has_changes == 'true' }}
        run: |
          cd /tmp/ \
          && wget ${{ env.ARM_GCC_URL }} \
          && tar -xf arm-gnu-toolchain-12.2.rel1-${{ env.ARCH }}-arm-none-eabi.tar.xz \
          && mv arm-gnu-toolchain-12.2.rel1-${{ env.ARCH }}-arm-none-eabi /opt/gcc-arm-none-eabi \
          && rm arm-gnu-toolchain-12.2.rel-${{ env.ARCH }}-arm-none-eabi -rf

      - name: CMake 3.25.4
        if: ${{ steps.check_change.outputs.has_changes == 'true' }}
        run: |
          wget https://github.com/Kitware/CMake/releases/download/v3.25.3/cmake-3.25.3-linux-${{ env.ARCH }}.sh \
          -q -O /tmp/cmake-install.sh \
          && chmod u+x /tmp/cmake-install.sh \
          && mkdir /opt/cmake-3.25.3 \
          && /tmp/cmake-install.sh --skip-license --prefix=/opt/cmake-3.25.3 \
          && rm /tmp/cmake-install.sh \
          && ln -sf /opt/cmake-3.25.3/bin/* /usr/local/bin

      - name: Build the project
        if: ${{ steps.check_change.outputs.has_changes == 'true' }}
        run: |
          mkdir ${{ github.workspace }}/ws
          python3 scripts/build.py

          printf '%*s\n' 100 '' | tr ' ' '*'
          cat ${{ github.workspace}}/Makefile
          printf '%*s\n' 100 '' | tr ' ' '*'
          
          cd ${{ github.workspace}} \
          && make all          

      # - name: Create GitHub App Token
      #   id: app-token
      #   uses: actions/create-github-app-token@v2
      #   with:
      #     app-id: ${{ secrets.GH_APP_ID }}
      #     private-key: ${{ secrets.GH_APP_PRIVATE_KEY }}
      #     owner: ${{ github.repository_owner }}
        
      # - name: Generate a review from check statuses
      #   run: |
      #       curl -X POST -H "Accept: application/vnd.github+json" -H "Authorization: token ${{ steps.app-token.outputs.token }}" \
      #       https://api.github.com/repos/$GITHUB_REPOSITORY/pulls/${{ github.event.pull_request.number }}/reviews \
      #       -d '{"commit_id":"${{ github.sha }}", "body":"Some checks were not successful!", "event":"REQUEST_CHANGES"}'
